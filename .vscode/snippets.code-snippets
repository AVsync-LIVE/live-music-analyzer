{
	// https://snippet-generator.app/

	// With $name or ${name:default}, you can insert the value of a variable.

	// The following variables can be used:

	// TM_SELECTED_TEXT The currently selected text or the empty string
	// TM_CURRENT_LINE The contents of the current line
	// TM_CURRENT_WORD The contents of the word under cursor or the empty string
	// TM_LINE_INDEX The zero-index based line number
	// TM_LINE_NUMBER The one-index based line number
	// TM_FILENAME The filename of the current document
	// TM_FILENAME_BASE The filename of the current document without its extensions
	// TM_DIRECTORY The directory of the current document
	// TM_FILEPATH The full file path of the current document
	// CLIPBOARD The contents of your clipboard
	// WORKSPACE_NAME The name of the opened workspace or folder

	// For inserting the current date and time:

	// CURRENT_YEAR The current year
	// CURRENT_YEAR_SHORT The current year's last two digits
	// CURRENT_MONTH The month as two digits (example '02')
	// CURRENT_MONTH_NAME The full name of the month (example 'July')
	// CURRENT_MONTH_NAME_SHORT The short name of the month (example 'Jul')
	// CURRENT_DATE The day of the month
	// CURRENT_DAY_NAME The name of day (example 'Monday')
	// CURRENT_DAY_NAME_SHORT The short name of the day (example 'Mon')
	// CURRENT_HOUR The current hour in 24-hour clock format
	// CURRENT_MINUTE The current minute
	// CURRENT_SECOND The current second
	// CURRENT_SECONDS_UNIX The number of seconds since the Unix epoch
	
	// For inserting line or block comments, honoring the current language:

	// BLOCK_COMMENT_START Example output: in PHP or in HTML -->
	// LINE_COMMENT Example output: in PHP 
	"Redux React custom hook": {
		"prefix": "rh",
		"body": [
			"const { $1 } = use$2()$3"
		],
		"description": "Redux custom hook"
	},
	"Redux Action Interface": {
		"prefix": "rai",
		"body": [
			"interface $1Action {",
			"  type: typeof $2,",
			"  payload: RenderTypes.$3ActionPayload",
			"}"
		],
		"description": "Action Interface"
	},
	"Redux watcher": {
		"prefix": "rw",
		"body": [
			"let old$3",
			"export const ON_$1 = callback => {",
			"  store.subscribe(() => {",
			"    const new$4 = store.getState().$2",
			"    if(!isEqual(new$5, old$6)) {",
			"      callback(new$7)",
			"    }",
			"    old$8 = new$9",
			"  })",
			"}"
		],
		"description": "Redux watcher"
	},
	"useEffect": {
		"prefix": "ue",
		"body": [
			"useEffect$4(() => $1, $2[$3])"
		],
		"description": "ue"
	},
	"API URL": {
		"prefix": "apiurl",
		"body": [
			"const { API_URL } = process.env"
		],
		"description": "API URL"
	},
	"React FC with singe file component": {
		"prefix": "fc",
		"body": [
			"import styled from 'styled-components'",
			"",
			"$1interface Props {",
      "  $2",
      "}",
      "",
			"const ${TM_FILENAME_BASE} = ({ $3 }: Props) => {",
			"  return (",
			"    <S_${TM_FILENAME_BASE}>",
			"      $4",
			"    </S_${TM_FILENAME_BASE}>",
			"  )",
			"}",
			"",
			"export default ${TM_FILENAME_BASE}",
			"",
			"const S_${TM_FILENAME_BASE} = styled.div`",
			"  width: 100%;",
			"  display: flex;",
			"  flex-wrap: wrap;",
			"  justify-content: center;",
			"  align-items: center;",
			"`"
		],
		"description": "React FC with singe file component"
	},
	"initialize styled component": {
		"prefix": "sc",
		"body": [
			"const S_Container$1 = styled.div$2`",
			"  $3",
			"`"
		],
		"description": "initialize styled component"
	},
	"Styled components props": {
		"prefix": "scp",
		"body": [
			"display$1: ${props => props.hide$2 ? 'none$3' : 'flex$4'};"
		],
		"description": "Styled components props"
	}
}